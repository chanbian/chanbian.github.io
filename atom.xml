<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chanbian.github.io</id>
    <title>蝉变</title>
    <updated>2020-12-30T08:09:19.030Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chanbian.github.io"/>
    <link rel="self" href="https://chanbian.github.io/atom.xml"/>
    <subtitle>「你不是没有才华，你只是在积蓄力量。」</subtitle>
    <logo>https://chanbian.github.io/images/avatar.png</logo>
    <icon>https://chanbian.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 蝉变</rights>
    <entry>
        <title type="html"><![CDATA[SpringBoot学习笔记]]></title>
        <id>https://chanbian.github.io/post/springboot-xue-xi-bi-ji/</id>
        <link href="https://chanbian.github.io/post/springboot-xue-xi-bi-ji/">
        </link>
        <updated>2020-12-30T07:59:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="springboot学习笔记">SpringBoot学习笔记</h1>
<h2 id="0-预备知识">0、预备知识</h2>
<h3 id="01-maven">0.1 Maven</h3>
<p>Maven 是一个项目管理工具，它包含了一个项目对象模 型 (POM：Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管 理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标 (goal)的逻辑。</p>
<ul>
<li>可用于管理项目的编译、测试、运行、打包、安装。</li>
<li>生成基础<strong>SpringBoot</strong>项目时就有是否使用Maven 的选项。</li>
<li>maven工程目录结构如下（与<strong>SpringBoot</strong>项目结构十分相似）
<ul>
<li><img src="https://chanbian.github.io/post-images/1609315526121.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
<h2 id="1-spring与springboot简介">1、Spring与SpringBoot简介</h2>
<h2 id="11-spring">1.1 Spring</h2>
<ul>
<li>
<p>任何实际的应用程序都是由很多组件组成的，每个组件负责整个应用功能的一部分，这些组件需要与其他的应用元素进行协调以完成自己的任务。当应用程序运行时，需要以某种方式创建并引入这些组件。</p>
</li>
<li>
<p>Spring的核心是提供了一个容器（container），通常称为Spring应用上下文（Spring applicationcontext），它们会创建和管理应用组件。这些组件也可以称为bean，会在Spring应用上下文中装配在一起，从而形成一个完整的应用程序。这就像砖块、砂浆、木材、管道和电线组合在一起，形成一栋房子似的。</p>
</li>
<li>
<p>将bean装配在一起的行为是通过一种基于依赖注入（dependency injection，DI）的模式实现的。此时，组件不会再去创建它所依赖的组件并管理它们的生命周期，使用依赖注入的应用依赖于单独的实体（容器）来创建和维护所有的组件，并将其注入到需要它们的bean中。通常，这是通过构造器参数和属性访问方法来实现的。</p>
</li>
<li>
<p>在Spring技术中，自动配置起源于所谓的自动装配（autowiring）和组件扫描（componentscanning）。借助组件扫描技术，Spring能够自动发现应用类路径下的组件，并将它们创建成Spring应用上下文中的bean。借助自动装配技术，Spring能够自动为组件注入它们所依赖的其他bean。</p>
</li>
<li>
<figure data-type="image" tabindex="2"><img src="https://chanbian.github.io/post-images/1609315694628.jpg" alt="" loading="lazy"></figure>
</li>
</ul>
<h3 id="12-springboot">1.2 SpringBoot</h3>
<ul>
<li>随着Spring Boot的引入，自动配置的能力已经远远超出了组件扫描和自动装配。Spring Boot是Spring框架的扩展，提供了很多增强生产效率的方法。最为大家所熟知的增强方法就是自动配置（autoconfiguration），Spring Boot能够基于类路径中的条目、环境变量和其他因素合理猜测需要配置的组件并将它们装配在一起。</li>
<li>Spring Boot用来简化Spring应用开发，约定大于配置， 去繁从简，just run就能创建一个独立的，产品级别的应用。</li>
<li>优点在于：
<ul>
<li>快速创建独立运行的Spring项目以及与主流框架集成</li>
<li>使用嵌入式的Servlet容器，应用无需打成WAR包</li>
<li>starters自动依赖与版本控制</li>
<li>大量的自动配置，简化开发，也可修改默认值</li>
<li>无需配置XML，无代码生成，开箱即用</li>
<li>准生产环境的运行时应用监控</li>
<li>与云计算的天然集成<br>
<img src="https://chanbian.github.io/post-images/1609315748831.png" alt="" loading="lazy"><br>
<img src="https://chanbian.github.io/post-images/1609315754051.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
<h2 id="2-spring-boot项目的创建">2、Spring Boot项目的创建</h2>
<h3 id="21项目创建方式一使用spring-initializr-的-web页面创建项目">2.1项目创建方式一：使用Spring Initializr 的 Web页面创建项目</h3>
<p>1、打开  https://start.spring.io/</p>
<p>2、填写项目信息，通过在Add Dependencies来指明依赖，最后点击GENERATE即可生成。</p>
<p>3、点击”Generate Project“按钮生成项目；下载此项目</p>
<p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p>
<p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。<br>
<img src="https://chanbian.github.io/post-images/1609315341041.png" alt="" loading="lazy"><br>
<img src="https://chanbian.github.io/post-images/1609315361153.png" alt="" loading="lazy"></p>
<h3 id="22项目创建方式二使用-idea-直接创建项目">2.2项目创建方式二：使用 IDEA 直接创建项目</h3>
<p>1、创建一个新项目</p>
<p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p>
<p>3、填写项目信息</p>
<p>4、选择初始化的组件（初学勾选 Web 即可）</p>
<p>5、填写项目路径</p>
<p>6、等待项目构建成功<br>
<img src="https://chanbian.github.io/post-images/1609315378090.png" alt="" loading="lazy"><br>
<img src="https://chanbian.github.io/post-images/1609315382501.png" alt="" loading="lazy"><br>
<img src="https://chanbian.github.io/post-images/1609315386084.png" alt="" loading="lazy"><br>
<img src="https://chanbian.github.io/post-images/1609315395152.png" alt="" loading="lazy"></p>
<h2 id="3-spring-boot项目结构">3、Spring Boot项目结构</h2>
<p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p>
<ul>
<li>
<p>程序的主启动类</p>
</li>
<li>
<p>一个 application.properties 配置文件</p>
</li>
<li>
<p>一个 测试类</p>
</li>
<li>
<p>一个 pom.xml</p>
</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://chanbian.github.io/post-images/1609315408829.png" alt="" loading="lazy"></figure>
<h3 id="31-主启动类">3.1 主启动类</h3>
<p>默认的主启动类如下所示：</p>
<pre><code class="language-java">//@SpringBootApplication 
@SpringBootApplication
public class SpringbootApplication {
   public static void main(String[] args) {
      SpringApplication.run(SpringbootApplication.class, args);
   }
}
</code></pre>
<h4 id="1常见的注解说明">（1）常见的注解说明：</h4>
<h5 id="springbootapplication"><strong>@SpringBootApplication</strong></h5>
<ul>
<li>来标注一个主程序类，标注在某个类上说明这个类是SpringBoot的主配置类 ，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</li>
</ul>
<h5 id="componentscan"><strong>@ComponentScan</strong></h5>
<ul>
<li>注解在Spring中很重要 ,它对应XML配置中的元素。</li>
</ul>
<h5 id="springbootconfiguration">@SpringBootConfiguration</h5>
<ul>
<li>SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；</li>
</ul>
<h5 id="configuration">@Configuration</h5>
<ul>
<li>说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；</li>
</ul>
<h5 id="enableautoconfiguration">@EnableAutoConfiguration</h5>
<ul>
<li>开启自动配置功能</li>
<li>自动配置的源头在spring.factories，用于管理所有的自动配置文件</li>
</ul>
<h4 id="2springapplication">（2）SpringApplication</h4>
<p>这个类主要做了以下四件事情：</p>
<ul>
<li>
<p>1、推断应用的类型是普通的项目还是Web项目</p>
</li>
<li>
<p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p>
</li>
<li>
<p>3、找出所有的应用程序监听器，设置到listeners属性中</p>
</li>
<li>
<p>4、推断并设置main方法的定义类，找到运行的主类</p>
</li>
<li>
<p>构造器如下：</p>
</li>
<li>
<pre><code class="language-java">public SpringApplication(ResourceLoader resourceLoader, Class... primarySources) {
    // ......
    this.webApplicationType = WebApplicationType.deduceFromClasspath();
    this.setInitializers(this.getSpringFactoriesInstances();
    this.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));
    this.mainApplicationClass = this.deduceMainApplicationClass();
}
</code></pre>
</li>
</ul>
<h4 id="3run方法流程">（3）run方法流程</h4>
<figure data-type="image" tabindex="4"><img src="https://chanbian.github.io/post-images/1609315478887.jpg" alt="" loading="lazy"></figure>
<h3 id="32-applicationproperties-配置文件">3.2  application.properties 配置文件</h3>
<h3 id="33-测试类">3.3 测试类</h3>
<h3 id="34-pomxml">3.4  pom.xml</h3>
<p>pom.xml用于管理Spring Boot项目的依赖。打开pom.xml，可以看到Spring Boot项目的依赖，其中：</p>
<ul>
<li><strong>导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中，管理者就需要手动配置版本了；</strong></li>
<li>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；也可以自己自定义 starter；</li>
</ul>
<pre><code class="language-xml">&lt;!-- 父依赖 --&gt;
&lt;!-- 依赖一个父项目，主要是管理项目的资源过滤及插件！ --&gt;
&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;
    &lt;relativePath/&gt;
&lt;/parent&gt;

&lt;dependencies&gt;
    &lt;!-- web场景启动器 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;!--spring-boot-starter-web帮我们导入了web模块正常运行所依赖的组件；--&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;!-- springboot单元测试 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
        &lt;!-- 剔除依赖 --&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;
                &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;!-- 打包插件 --&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<h2 id="4-spring与jdbc">4、Spring与JDBC</h2>
<p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p>
<ul>
<li>
<p>Sping Data 官网：https://spring.io/projects/spring-data</p>
</li>
<li>
<p>数据库相关的启动器，可以参考官方文档：https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World！]]></title>
        <id>https://chanbian.github.io/post/hello-gridea/</id>
        <link href="https://chanbian.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>👏<br>
👇<br>
📝<br>
🌉<br>
🏷️<br>
📋<br>
💻<br>
🌎<br>
💬<br>
🌁<br>
🖥<br>
🌱<br>
😘</p>
]]></content>
    </entry>
</feed>